// Code generated by bitproto. DO NOT EDIT.

package essaimbp

import (
	"strconv"
	"encoding/json"

	bp "github.com/hit9/bitproto/lib/go"
)

// Avoid possible golang import not used error
var formatInt = strconv.FormatInt
var jsonMarshal = json.Marshal
var _ = bp.Useless

type RGBA struct {
	R uint8 `json:"r"` // 8bit
	G uint8 `json:"g"` // 8bit
	B uint8 `json:"b"` // 8bit
	A uint8 `json:"a"` // 8bit
}

// Number of bytes to serialize struct RGBA
const BYTES_LENGTH_RGBA uint32 = 4

func (m *RGBA) Size() uint32 { return 4 }

// Returns string representation for struct RGBA.
func (m *RGBA) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct RGBA to bytes buffer.
func (m *RGBA) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *RGBA) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *RGBA) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(2, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(3, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(4, bp.NewUint(8)),
	}
	return bp.NewMessageProcessor(false, 32, fieldDescriptors)
}

func (m *RGBA) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	default:
		return nil  // Won't reached
	}
}

func (m *RGBA) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.R |= (uint8(b) << lshift)
		case 2:
			m.G |= (uint8(b) << lshift)
		case 3:
			m.B |= (uint8(b) << lshift)
		case 4:
			m.A |= (uint8(b) << lshift)
		default:
			return
	}
}

func (m *RGBA) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.R >> rshift)
		case 2:
			return byte(m.G >> rshift)
		case 3:
			return byte(m.B >> rshift)
		case 4:
			return byte(m.A >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *RGBA) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}

type Pattern struct {
	Steps [16]RGBA `json:"steps"` // 512bit
	Channel uint64 `json:"channel"` // 64bit
}

// Number of bytes to serialize struct Pattern
const BYTES_LENGTH_PATTERN uint32 = 72

func (m *Pattern) Size() uint32 { return 72 }

// Returns string representation for struct Pattern.
func (m *Pattern) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct Pattern to bytes buffer.
func (m *Pattern) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *Pattern) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *Pattern) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewArray(false, 16, (&RGBA{}).BpProcessor())),
		bp.NewMessageFieldProcessor(2, bp.NewUint(64)),
	}
	return bp.NewMessageProcessor(false, 576, fieldDescriptors)
}

func (m *Pattern) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	case 1:
		return &(m.Steps[di.I(0)])
	default:
		return nil  // Won't reached
	}
}

func (m *Pattern) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 2:
			m.Channel |= (uint64(b) << lshift)
		default:
			return
	}
}

func (m *Pattern) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 2:
			return byte(m.Channel >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *Pattern) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}